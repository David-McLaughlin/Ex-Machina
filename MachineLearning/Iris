%python
###########################################################################################################################
# This is the IRIS Machine learning project with extensive comments developers who are new to machine learning and python #
# I am not the authore of the code base just of the comments - some small code changes were made to access the dataset    #
# Import lybraries and version                                                                                            #

import sys
print('Python: {}'.format(sys.version))
import scipy
print('scipy: {}'.format(scipy.__version__))
import numpy
print('numpy: {}'.format(numpy.__version__))
import matplotlib
print('matplotlib: {}'.format(matplotlib.__version__))
import pandas
print('pandas: {}'.format(pandas.__version__))
# scikit-learn
import sklearn
print('sklearn: {}'.format(sklearn.__version__))


##################
# Load libraries #
##################
import pandas
from pandas.plotting import scatter_matrix
import matplotlib.pyplot as plt
from sklearn import model_selection
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC

########################################
# list tables available in our Hive    #
# The Starter End Point must be active #
########################################
dbutils.fs.ls("dbfs:/user/hive/warehouse")

########################################
# Load Data and assign column headings #
########################################
print(' -----------------------------------------------------------------------------------------------------')
print(' --------------------------------------------  Load Data -------------------------------------------- ')
print(' -----------------------------------------------------------------------------------------------------')
dataset = spark.read.load("dbfs:/user/hive/warehouse/iris").toPandas()
dataset.columns = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']
#####################
# Print our DataSet #
#####################
display(dataset)

      ################# ONLY REQUIRED FOR LOCAL EXECUTION ########################
      # *** IF YOU ARE NOT USING Databricks and running local use this code **** #
      # *** you must load the iris.csv into the directory specified by you  **** #
      # *** in the URL - google Iris this is a common AI project            *****#
      ################################# READ ME ##################################
      # url = "C:\SOMEDIR\ANOTHERDIR\iris.csv"
      # names = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']
      # dataset = pandas.read_csv(url, names=names)


##################################################
# display shape data the number of rows, columns #
##################################################
print(' ----------------------------------------------------------------------------------------')
print(' -------------------------------------------- Print Shape Data (Rows/Col)')
print(' ----------------------------------------------------------------------------------------')
print(dataset.shape)
#################################################
# print the 10 first rows with the head command #
#################################################
print(' ----------------------------------------------------------------------------------------')
print(' -------------------------------------------- Print Head(10) - Data ')
print(' ----------------------------------------------------------------------------------------')
print(dataset.head(10))
#################################################
# print the 10 first rows with the head command #
#################################################
print(' ----------------------------------------------------------------------------------------')
print(' -------------------------------------------- Print Describe - Data ')
print(' ----------------------------------------------------------------------------------------')
print(dataset.describe())

print(' ----------------------------------------------------------------------------------------')
print(' -------------------------------------------- Print Class Distribution / Group - Data ')
print(' ----------------------------------------------------------------------------------------')
####################################################################
# class distribution - eg: number of each type of Iris in this case
####################################################################
print(dataset.groupby('class').size())

print(' ----------------------------------------------------------------------------------------')
print(' -------------------------------------------- Load Data (Box and Whisker) - Plot ')
print(' ----------------------------------------------------------------------------------------')

##################################################################################################################
# The Box and Whisker Diagram visualizes the quariles of the data ( quarters )
# The box limits indicate the range of the central 50% of the data with a central line marking the median value
# Lines extend from each box to capture the range of the remaining data, with dots placed past the line edges to 
# indicate outliers.
##################################################################################################################

            ___________________
# |_________|  25%    |  25%   |_______________|
# |    25   |_________|________|     25%       |


dataset.plot(kind='box', subplots=True, layout=(2,2), sharex=False, sharey=False)
plt.show()

